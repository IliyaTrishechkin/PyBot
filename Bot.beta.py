import os, json, logging
from pathlib import Path
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, CallbackQueryHandler, ConversationHandler, MessageHandler, filters

load_dotenv(Path(__file__).parent / '.env', encoding='utf-8-sig')
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_IDENT"))

STATE_Q = 1
DATA = json.loads((Path(__file__).parent / 'question.json').read_text(encoding='utf-8'))
SYMBOL = DATA["SYMBOL"]

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kd = [[InlineKeyboardButton("–†–æ–∑–ø–æ—á–∞—Ç–∏", callback_data=f"smain")]]
    text = DATA["Hello"]
    await update.message.reply_text(text, reply_markup=(InlineKeyboardMarkup(kd)))
    # –∑–∞–ø–∏—Å id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    with open('id_users.json', "r", encoding="utf-8") as f:
        data = json.load(f)
    
    users_list = data.get("Id_users", [])
    user_id_str = str(update.effective_user.id)

    if user_id_str not in users_list:
        users_list.append(user_id_str)   
        data["Id_users"] = users_list
        with open('id_users.json', "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)


async def HelpAdmin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_ID:
        return 0
    await update.message.reply_text(f"–Ø —Ä–æ–∑–ø–æ–≤—ñ–º –ø—Ä–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∞–¥–º—ñ–Ω—ñ–≤:\n\nüîπ/sb –∫–æ–º–∞–Ω–¥–∞ –∑–∞–¥–∞—î —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª. –ó–∞—Ä–∞–∑ —Å–∏–º–≤–æ–ª {SYMBOL}\n\nüîπ/ad –∑–æ–∑—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å —Ñ–æ—Ç–æ, —Ç–µ—Å—Ç, —Ñ–æ—Ç–æ —Ç–∞ —Ç–µ–∫—Å—Ç. –ü–æ—á–∏–Ω–∞—Ç–∏ —Ç—Ä–µ–±–∞ –∑ /ad –¥–∞–ª—ñ —Ç–µ–∫—Å—Ç –∞–±–æ –Ω—ñ—á–≥–æ. –Ø–∫—â–æ –ø—ñ—Å–ª—è —Ç–µ–∫—Å—Ç–∞ –≤—Å—Ç–∞–≤–∏—Ç–∏ —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —Ç–æ —Å–≤–æ—Ä–∏—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞ –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º. –ü—Ä–∏–∫–ª–∞–¥: /ad <—Ç–µ–∫—Å—Ç>{SYMBOL}<–ø–æ—Å–∏–ª–∞–Ω–Ω—è>\n\nüîπ/add –¥–æ–¥–∞—î –Ω–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è <child/adult>{SYMBOL}<–ø–∏—Ç–∞–Ω–Ω—è>{SYMBOL}<–≤—ñ–¥–ø–æ–≤—ñ–¥—å>\n\nüîπ–ö–æ–ª–∏ –ø—Ä–∏–π—à–ª–æ –ø–∏—Ç–∞–Ω–Ω—è –≤—Å—Ç–∞–≤—Ç–µ id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª '{SYMBOL}', –≤—ñ–¥–ø–æ–≤—ñ–¥—å")


async def set_symbol(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_ID:
        await update.message.reply_text("–¶—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ª–∏—à–µ –∞–¥–º—ñ–Ω–∞–º.")
        return 0
    DATA = json.loads((Path(__file__).parent / 'question.json').read_text(encoding='utf-8'))
    text = (update.message.text or "").replace("/sb", "").strip()
    if text == "" or len(text) > 1:
        await update.message.reply_text("–ù–ï –≤–∫–∞–∑–∞–Ω —Å–∏–º–≤–æ–ª –∞–±–æ –±—ñ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞–∫–∞")
        return 0
    try: 
        SYMBOL = text
        DATA["SYMBOL"] = SYMBOL
        with open(Path(__file__).parent / 'question.json', "w", encoding="utf-8") as f:
                json.dump(DATA, f, ensure_ascii=False, indent=4)
        DATA = json.loads((Path(__file__).parent / 'question.json').read_text(encoding='utf-8'))
        await update.message.reply_text(f"–ó–Ω–∞–∫ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {DATA["SYMBOL"]}‚úÖ")
    except Exception as e:
        logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ {e}")
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞‚ùå")


async def start_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data
    await q.answer()
    if data == "smain":
        kd = [[KeyboardButton(item)] for item in DATA["MainMenu"]]
        await q.message.reply_text("–û–±–µ—Ä–∏ —Ç–µ–º—É –∑—ñ —Å–ø–∏—Å–∫—É –Ω–∏–∂—á–µ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ.", reply_markup=ReplyKeyboardMarkup(kd, resize_keyboard=True))


async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    match text:
        case "–ü—Ä–æ Star for Life Ukraineüåü":
            text = DATA["SchoolInfo"]["text"]
            kb = [[InlineKeyboardButton("–î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ", url=DATA["SchoolInfo"]["url"])]]
            await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(kb))
        case "‚ùì–ü–æ—à–∏—Ä–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è":
            kd = [
                [InlineKeyboardButton("–í—ñ–¥ –¥–∏—Ç–∏–Ω–∏", callback_data="faq|child")],
                [InlineKeyboardButton("–í—ñ–¥ –¥–æ—Ä–æ—Å–ª–æ–≥–æ", callback_data="faq|adult")]
                ]
            await update.message.reply_text("–í—ñ–¥ –∫–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è", reply_markup=InlineKeyboardMarkup(kd))
        case "–°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñüì±":
            kb = [[InlineKeyboardButton(name, url=url)] for name, url in DATA["Social"].items()]
            await update.message.reply_text("–ù–∞—à—ñ —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ:", reply_markup=InlineKeyboardMarkup(kb))
        case "–ö—É—Ä—Å–∏üíª":
            text = DATA["ActiveCourse"]["Hello"]
            kd = [[InlineKeyboardButton(name, callback_data=f"course|{name}")] for name in DATA["ActiveCourse"]["Course"]]
            await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(kd))


async def ClikButton(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    parts = q.data.split("|")
    cmd, arg = parts[0], parts[-1]
    match cmd:
        case "faq":
            group = arg
            questions = list(DATA["FAQs"][group].keys())
            kd = [[InlineKeyboardButton(q_text, callback_data=f"showfaq|{group}|{i}")] for i, q_text in enumerate(questions)] + [[InlineKeyboardButton("–£ –º–µ–Ω–µ —î —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è", callback_data=f"myQ")]] + [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data=f"back|FAQs")]]
            await q.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(kd))
        case "course":
            text = DATA["ActiveCourse"]["Course"][arg][0]
            url = DATA["ActiveCourse"]["Course"][arg][1]
            kd = [[InlineKeyboardButton("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", url=url)]] + [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data=f"back|curses")]]
            await q.edit_message_text(text, reply_markup=InlineKeyboardMarkup(kd))
        case "showfaq":
            group, idx = parts[1], int(parts[2])
            question = list(DATA["FAQs"][group].keys())[idx]
            answer = DATA["FAQs"][group][question]
            text = f"‚ùì {question}\n\nüí¨ {answer}"
            kd = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data=f"faq|{group}")]]
            await q.edit_message_text(text, reply_markup=InlineKeyboardMarkup(kd))
        case "back":
            match arg:
                case "curses":
                    text = DATA["ActiveCourse"]["Hello"]
                    kd = [[InlineKeyboardButton(name, callback_data=f"course|{name}")] for name in DATA["ActiveCourse"]["Course"]]
                    await q.edit_message_text(text, reply_markup=InlineKeyboardMarkup(kd))
                case "FAQs":
                    kd = [[InlineKeyboardButton("–í—ñ–¥ –¥–∏—Ç–∏–Ω–∏", callback_data="faq|child")], [InlineKeyboardButton("–í—ñ–¥ –¥–æ—Ä–æ—Å–ª–æ–≥–æ", callback_data="faq|adult")]]
                    await q.edit_message_text("–í—ñ–¥ –∫–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è", reply_markup=InlineKeyboardMarkup(kd))  
        case "myQ":
            await update.callback_query.message.reply_text("–î–æ–±—Ä–µ, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è. –Ø –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –Ω–∞—à—ñ–π –∫–æ–º–∞–Ω–¥—ñ.")
            return STATE_Q


async def receive_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    u = update.effective_user
    context.bot_data['last_user'] = u.id
    msg = f"–ù–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ @{u.username or '–Ω–µ–≤—ñ–¥–æ–º–∏–π'} (ID: {u.id}):\n\n{text}"
    await context.bot.send_message(chat_id=ADMIN_ID, text = msg)
    await context.bot.send_message(ADMIN_ID, f"–ù–∞–ø–∏—à—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫–æ–º—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—Ç–µ, –ø–æ—Ç—ñ–º {SYMBOL} —ñ —Å–∞–º—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å.\n–Ø–∫—â–æ id –Ω–µ –≤–∫–∞–∑–∞—Ç–∏, —Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç—Å—è –æ—Å—Ç–∞–Ω–Ω—å–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—é —è–∫–∏–π –∑–∞–¥–∞–≤ –ø–∏—Ç–∞–Ω–Ω—è.\n –ü—Ä–∏–∫–ª–∞–¥: 12345678{SYMBOL}—Ç–µ–∫—Å—Ç –∞–±–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç.")
    await update.message.reply_text("–î—è–∫—É—é! –ü–∏—Ç–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    return ConversationHandler.END


async def admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_ID:
        return 0 
    chat = update.effective_chat
    user = update.effective_user
    message = update.message.text
    data_answer = message.split(SYMBOL)

    if len(data_answer) == 1:
        uid = context.bot_data.pop('last_user', None)
        if uid:
            await context.bot.send_message(uid, f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message}")
            await update.message.reply_text("–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
    else:
        uid = int(data_answer[0])
        await context.bot.send_message(uid, f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{data_answer[1]}")
        await update.message.reply_text("–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")


async def add_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        if not context.args:
            await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:\n<child/adult>/<–ø–∏—Ç–∞–Ω–Ω—è>/<–≤—ñ–¥–ø–æ–≤—ñ–¥—å>")
            return
        message = " ".join(context.args)  
        parts = message.split(SYMBOL)

        if len(parts) != 3:
            await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:\n<child/adult>/<–ø–∏—Ç–∞–Ω–Ω—è>/<–≤—ñ–¥–ø–æ–≤—ñ–¥—å>")
            return
        group, question, answer = parts
        group = group.strip().lower()
        question = question.strip()
        answer = answer.strip()

        if group not in ["child", "adult"]:
            await update.message.reply_text("–ü–µ—Ä—à–∞ —á–∞—Å—Ç–∏–Ω–∞ –º–∞—î –±—É—Ç–∏ 'child' –∞–±–æ 'adult'")
            return

        if question in DATA["FAQs"][group]:
            await update.message.reply_text("–¶–µ –ø–∏—Ç–∞–Ω–Ω—è –≤–∂–µ —ñ—Å–Ω—É—î.")
            return

        DATA["FAQs"][group][question] = answer
        with open(Path(__file__).parent / 'question.json', "w", encoding="utf-8") as f:
            json.dump(DATA, f, ensure_ascii=False, indent=4)

        await update.message.reply_text(f"–ü–∏—Ç–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ '{group}'.")
    else:
        await update.message.reply_text("–¶—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ª–∏—à–µ –∞–¥–º—ñ–Ω–∞–º.")


async def ad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ex, no = 0, 0

    if update.effective_chat.id != ADMIN_ID:
        await update.message.reply_text("–¶—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ª–∏—à–µ –∞–¥–º—ñ–Ω–∞–º.")
        return 0
    
    if not update.message.photo:
        text = (update.message.text or "").replace("/ad", "").strip()
        if not text:
            await update.message.reply_text("–¢–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
            return 0
        data = json.loads((Path(__file__).parent / 'id_users.json').read_text(encoding='utf-8'))
        user_ids = data.get("Id_users", [])
        user_ids = "|".join(user_ids)
        user_ids = user_ids.split("|")
        text = text.split(SYMBOL)
        if len(text)>1:
            kd = [[InlineKeyboardButton("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", url=text[-1])]]
            texts = "".join(text[:(len(text)-1)])
        else:
            kd = []
            texts = text[0]
        for i in user_ids:
            try:
                await context.bot.send_message(i, text = texts, reply_markup=InlineKeyboardMarkup(kd) if kd else None)
                ex+=1
            except Exception as e:
                logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ {e}")
                no+=1
        await update.message.reply_text(f"–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n‚úÖ –£—Å–ø—ñ—à–Ω–æ: {ex}\n‚ùå –ü–æ–º–∏–ª–∫–∏: {no}")
        return 0
    
    photo = update.message.photo[-1].file_id
    captiond = (update.message.caption or "").replace("/ad", "").strip()
    data = json.loads((Path(__file__).parent / 'id_users.json').read_text(encoding='utf-8'))
    user_ids = data.get("Id_users", [])
    user_ids = "|".join(user_ids)
    user_ids = user_ids.split("|")
    text = captiond.split(SYMBOL)
    if len(text)==2:
        kd = [[InlineKeyboardButton("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", url=text[-1])]]
    else:
        kd = []
    if photo and captiond:
        text = captiond.split(SYMBOL)
        for i in user_ids:
            try:
                await context.bot.send_photo(chat_id=int(i), photo=photo, caption = text[0], reply_markup=InlineKeyboardMarkup(kd) if kd else None)
                ex+=1
            except Exception as e:
                logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ {e}")
                no+=1
    elif photo:
        for i in user_ids:
            try:
                await context.bot.send_photo(chat_id=int(i), photo=photo, reply_markup=InlineKeyboardMarkup(kd) if kd else None)
                ex+=1
            except Exception as e:
                logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ {e}")
                no+=1
    
    await update.message.reply_text(f"–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n‚úÖ –£—Å–ø—ñ—à–Ω–æ: {ex}\n‚ùå –ü–æ–º–∏–ª–∫–∏: {no}")




if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(ClikButton, pattern="^(myQ)$")],
        states={STATE_Q: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_question)]},
        fallbacks=[],
    )

    app.add_handler(conv) 
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler( "sb", set_symbol))
    app.add_handler(CommandHandler("add" , add_question))
    app.add_handler(CommandHandler("help" , HelpAdmin))
    app.add_handler(MessageHandler((filters.Regex(r"^/ad") | filters.CaptionRegex(r"^/ad")) & filters.Chat(ADMIN_ID), ad))

    app.add_handler(CallbackQueryHandler(start_categories, pattern="^(smain)\|?.*$"))
    app.add_handler(MessageHandler(filters.TEXT & filters.Chat(ADMIN_ID), admin_reply))

    app.add_handler(MessageHandler(filters.TEXT, on_callback))
    app.add_handler(CallbackQueryHandler(ClikButton, pattern="^(main|faq|course|showfaq|back)\|?.*$"))
    app.run_polling(drop_pending_updates=True)