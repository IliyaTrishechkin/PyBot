import os
import json
import logging
from pathlib import Path
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, CallbackQueryHandler, ConversationHandler, MessageHandler, filters

load_dotenv(Path(__file__).parent / '.env', encoding='utf-8-sig')
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_IDENT"))

STATE_ASK, STATE_FB, STATE_REV, STATE_DATA_1, STATE_DATA_2, STATE_DATA_3 = range(1, 7)
DATA = json.loads((Path(__file__).parent / 'question.json').read_text(encoding='utf-8'))
SYMBOL = DATA["SYMBOL"]

def up_date():
    global SYMBOL
    global DATA
    DATA = json.loads((Path(__file__).parent / 'question.json').read_text(encoding='utf-8'))
    SYMBOL = DATA["SYMBOL"]

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [
        [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data="menu_faq"),
         InlineKeyboardButton("üåü –ü—Ä–æ Star for Life Ukraine", callback_data="menu_about")],
        [InlineKeyboardButton("‚úâÔ∏è –ó–∞–¥–∞—Ç–∏ —Å–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data="menu_ask"),
         InlineKeyboardButton("üì± –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ", callback_data="menu_social")],
        [InlineKeyboardButton("üßæ–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —Å–≤–æ—ó –¥–∞–Ω–Ω—ñ", callback_data="menu_userdata"),
         InlineKeyboardButton("üíª –ö—É—Ä—Å–∏", callback_data="menu_courses")],
        [InlineKeyboardButton("üí¨ –ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫", callback_data="menu_feedback"),
         InlineKeyboardButton("‚≠êÔ∏è –í—ñ–¥–≥—É–∫–∏", callback_data="menu_reviews")]
    ]
    await update.message.reply_text(DATA["Hello"], reply_markup=InlineKeyboardMarkup(kb))
    with open('id_users.json', 'r', encoding='utf-8') as f:
        ud = json.load(f)
    users = ud.get("Id_users", [])
    uid = str(update.effective_user.id)
    if uid not in users:
        users.append(uid)
        ud["Id_users"] = users
        with open('id_users.json', 'w', encoding='utf-8') as f:
            json.dump(ud, f, ensure_ascii=False, indent=4)

async def on_main_menu_pressed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    match q.data:
        case "menu_faq":
            kb = [
                [InlineKeyboardButton("–í—ñ–¥ –¥–∏—Ç–∏–Ω–∏", callback_data="faq|child")],
                [InlineKeyboardButton("–í—ñ–¥ –¥–æ—Ä–æ—Å–ª–æ–≥–æ", callback_data="faq|adult")],
                [InlineKeyboardButton("‚Üê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="menu_main")]
            ]
            await q.edit_message_text("–í—ñ–¥ –∫–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è?", reply_markup=InlineKeyboardMarkup(kb))
        case "menu_about":
            txt = DATA["SchoolInfo"]["text"]
            kb = [
                [InlineKeyboardButton("–î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ", url=DATA["SchoolInfo"]["url"])],
                [InlineKeyboardButton("‚Üê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="menu_main")]
            ]
            await q.edit_message_text(txt, reply_markup=InlineKeyboardMarkup(kb))
        case "menu_ask":
            await q.edit_message_text("–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è, —ñ —è –ø–µ—Ä–µ–¥–∞–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return STATE_ASK
        case "menu_feedback":
           await q.edit_message_text("üîî –ù–∞–º –¥—É–∂–µ –≤–∞–∂–ª–∏–≤–∞ –≤–∞—à–∞ –¥—É–º–∫–∞!\n–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º–∏ –≤—Ä–∞–∂–µ–Ω–Ω—è–º–∏, —ñ–¥–µ—è–º–∏ –∞–±–æ –∑–∞—É–≤–∞–∂–µ–Ω–Ω—è–º–∏, —â–æ–± –º–∏ —Å—Ç–∞–≤–∞–ª–∏ –∫—Ä–∞—â–∏–º–∏ üí¨\n–ù–∞–ø–∏—à—ñ—Ç—å –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∏–∂—á–µ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ")
           return STATE_FB
        case "menu_reviews":
            await q.edit_message_text("üåü –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –¥–æ—Å–≤—ñ–¥–æ–º!\n–©–æ —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—å —É –∫—É—Ä—Å—ñ –∞–±–æ —Ä–æ–±–æ—Ç—ñ –±–æ—Ç–∞? –©–æ –º–æ–∂–µ–º–æ –ø–æ–∫—Ä–∞—â–∏—Ç–∏?\n–ù–∞–ø–∏—à—ñ—Ç—å –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∏–∂—á–µ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ")
            return STATE_REV
        case "menu_social":
            kb = [[InlineKeyboardButton(n, url=u)] for n, u in DATA["Social"].items()]
            kb.append([InlineKeyboardButton("‚Üê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="menu_main")])
            await q.edit_message_text("–ù–∞—à—ñ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ:", reply_markup=InlineKeyboardMarkup(kb))
        case "menu_courses":
            txt = DATA["ActiveCourse"]["Hello"]
            kb = [[InlineKeyboardButton(c["title"], callback_data=f"course|{c['title']}")] for c in DATA["ActiveCourse"]["Course"]]
            kb.append([InlineKeyboardButton("‚Üê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="menu_main")])
            await q.edit_message_text(txt, reply_markup=InlineKeyboardMarkup(kb))
        case "menu_userdata":
            await q.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ü–Ü–ë:\n–ø—Ä–∏–∫–ª–∞–¥ -> –°–µ–≤–µ—Ä—é–∫ –õ–∞—Ä–∏—Å–∞ –Ü–≤–∞–Ω—ñ–≤–Ω–∞")
            return STATE_DATA_1
        case "menu_main":
            kb = [
                [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data="menu_faq"),
                 InlineKeyboardButton("üåü –ü—Ä–æ Star for Life Ukraine", callback_data="menu_about")],
                [InlineKeyboardButton("‚úâÔ∏è –ó–∞–¥–∞—Ç–∏ —Å–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data="menu_ask"),
                 InlineKeyboardButton("üì± –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ", callback_data="menu_social")],
                [InlineKeyboardButton("üßæ–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —Å–≤–æ—ó –¥–∞–Ω–Ω—ñ", callback_data="menu_userdata"),
                 InlineKeyboardButton("üíª –ö—É—Ä—Å–∏", callback_data="menu_courses")],
                [InlineKeyboardButton("üí¨ –ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫", callback_data="menu_feedback"),
                 InlineKeyboardButton("‚≠êÔ∏è –í—ñ–¥–≥—É–∫–∏", callback_data="menu_reviews")]
            ]
            await q.edit_message_text(DATA["Hello"], reply_markup=InlineKeyboardMarkup(kb))


async def receive_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    chat_id = update.message.chat.id  
    thread_id = getattr(update.message, "message_thread_id", None)
    data = json.loads((Path(__file__).parent / 'id_users.json').read_text(encoding='utf-8'))
    if str(u.id) in data.get("Id_ban", []):
        await update.message.reply_text("–ù–∞–∂–∞–ª—å –≤–∏ –±—É–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ñ")
        return
    context.bot_data['last_user'] = u.id
    source_id = u.id if update.message.chat.type == "private" else chat_id
    msg = (f"üì© –ù–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ @{u.username or '–Ω–µ–≤—ñ–¥–æ–º–∏–π'} (ID: {source_id})(thread_id: {thread_id}):\n\n"f"{update.message.text}")
    await context.bot.send_message(chat_id=ADMIN_ID, text=msg, message_thread_id=1106)
    kb = [[InlineKeyboardButton("‚Üê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="menu_main")]]
    await update.message.reply_text("–î—è–∫—É—é! –ü–∏—Ç–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=InlineKeyboardMarkup(kb))
    return ConversationHandler.END


async def receive_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    data = json.loads((Path(__file__).parent / 'id_users.json').read_text(encoding='utf-8'))
    if str(u.id) in data["Id_ban"]:
        await update.message.reply_text("–ù–∞–∂–∞–ª—å –≤–∏ –±—É–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ñ")
        return
    msg = f"–ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫ –≤—ñ–¥ @{u.username or '–Ω–µ–≤—ñ–¥–æ–º–∏–π'} (ID: {u.id}):\n\n{update.message.text}"
    await context.bot.send_message(ADMIN_ID, msg, message_thread_id=1236)
    kb = [[InlineKeyboardButton("‚Üê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="menu_main")]]
    await update.message.reply_text("–î—è–∫—É—é –∑–∞ –≤–∞—à –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫!", reply_markup=InlineKeyboardMarkup(kb))
    return ConversationHandler.END

async def receive_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    data = json.loads((Path(__file__).parent / 'id_users.json').read_text(encoding='utf-8'))
    if str(u.id) in data["Id_ban"]:
        await update.message.reply_text("–ù–∞–∂–∞–ª—å –≤–∏ –±—É–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ñ")
        return
    msg = f"–í—ñ–¥–≥—É–∫ –≤—ñ–¥ @{u.username or '–Ω–µ–≤—ñ–¥–æ–º–∏–π'} (ID: {u.id}):\n\n{update.message.text}"
    await context.bot.send_message(ADMIN_ID, msg, message_thread_id=1120)
    kb = [[InlineKeyboardButton("‚Üê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="menu_main")]]
    await update.message.reply_text("–î—è–∫—É—é –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫!", reply_markup=InlineKeyboardMarkup(kb))
    return ConversationHandler.END


async def collect_data_1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["id"] = update.effective_chat.id
    context.user_data["User_name"] = update.effective_user.username
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–∫:")
    return STATE_DATA_2

async def collect_data_2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["age"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à e-mail:")
    return STATE_DATA_3

async def collect_data_3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    user_id = str(user.id)
    username = user.username or "–Ω–µ–≤—ñ–¥–æ–º–∏–π"
    context.user_data["email"] = update.message.text
    name = context.user_data.get("name", "‚Äî")
    age = context.user_data.get("age", "‚Äî")
    email = context.user_data.get("email", "‚Äî")

    data = json.loads((Path(__file__).parent / 'id_users.json').read_text(encoding='utf-8'))

    data["User_data"][user_id] = {
        "User_name": f"@{username}",
        "Name": name,
        "Age": age,
        "E-mail": email
    }
    with open(Path(__file__).parent / "id_users.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)
    await update.message.reply_text(f"‚úÖ –î—è–∫—É—î–º–æ!\n–í–∞—à—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ:\n\nüë§ ID: @{username}\nüîπ –Ü–º'—è: {name}\nüîπ –í—ñ–∫: {age}\nüìß E-mail: {email}")
    return ConversationHandler.END


async def HelpAdmin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_ID:
        return
    text = f"""
            <b>–ö–æ–º–∞–Ω–¥–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å)</b>

            ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            <b>1. –ó–º—ñ–Ω–∞ —Å–∏–º–≤–æ–ª—É —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á–∞</b>
            <b>–ö–æ–º–∞–Ω–¥–∞:</b>
            /sb <i>—Å–∏–º–≤–æ–ª</i>
            <b>–ü–∞—Ä–∞–º–µ—Ç—Ä–∏:</b>
            —Å–∏–º–≤–æ–ª ‚Äì –±—É–¥—å-—è–∫–∏–π 1 —Å–∏–º–≤–æ–ª
            <b>–ü—Ä–∏–∫–ª–∞–¥:</b>
            /sb |

            ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            <b>2. –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É</b>
            <b>–§–æ—Ä–º–∞—Ç–∏:</b>
            1) <code>ID{SYMBOL}–í—ñ–¥–ø–æ–≤—ñ–¥—å</code>
            ‚Äì –æ—Å–æ–±–∏—Å—Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            2) <code>ID{SYMBOL}ThreadID{SYMBOL}–í—ñ–¥–ø–æ–≤—ñ–¥—å</code>
            ‚Äì –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤ —Ç–µ–º—É –≥—Ä—É–ø–∏
            <b>–ü–æ—è—Å–Ω–µ–Ω–Ω—è:</b>
            ID ‚Äì Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ —á–∞—Ç—É
            ThreadID ‚Äì ID —Ç–µ–º–∏
            –í—ñ–¥–ø–æ–≤—ñ–¥—å ‚Äì —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            <b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>
            <code>123456789{SYMBOL}–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è!</code>
            <code>-1002222333444{SYMBOL}1106{SYMBOL}–í—ñ–¥–ø–æ–≤—ñ–¥—å —É —Ç–µ–º—É</code>

            <b>–°–ª—É–∂–±–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</b>
            ID –≥—Ä—É–ø–∏: <code>{update.effective_chat.id}</code>
            ID —Ç–µ–º–∏: <code>{update.message.message_thread_id}</code>
            """
    page = 0
    kb = [
        [InlineKeyboardButton("‚û°", callback_data=f"helpadmin|{page+1}")]
    ]
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(kb))


async def set_symbol(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_ID:
        await update.message.reply_text("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω.")
        return
    d = json.loads((Path(__file__).parent / 'question.json').read_text(encoding='utf-8'))
    sym = (update.message.text or "").replace("/sb", "").strip()
    if len(sym) != 1:
        await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª.")
        return
    d["SYMBOL"] = sym
    with open(Path(__file__).parent / 'question.json', 'w', encoding='utf-8') as f:
        json.dump(d, f, ensure_ascii=False, indent=4)
    await update.message.reply_text(f"–°–∏–º–≤–æ–ª –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {sym}")


async def ad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_ID:
        return
    ex = no = 0
    ids = json.loads((Path(__file__).parent / 'id_users.json').read_text(encoding='utf-8'))["Id_users"]
    if update.message.photo:
        photo = update.message.photo[-1].file_id
        cap = (update.message.caption or "").replace("/ad", "").strip().split(SYMBOL)
        body = cap[0] if cap else ""
        kb = [[InlineKeyboardButton("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", url=cap[1])]] if len(cap) == 2 else []
        for uid in ids:
            try:
                if body:
                    await context.bot.send_photo(int(uid), photo=photo, caption=body, reply_markup=InlineKeyboardMarkup(kb))
                else:
                    await context.bot.send_photo(int(uid), photo=photo)
                ex += 1
            except:
                no += 1
    else:
        txt = (update.message.text or "").replace("/ad", "").strip().split(SYMBOL)
        body, kb = ("".join(txt[:-1]), [[InlineKeyboardButton("–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ", url=txt[-1])]]) if len(txt) > 1 else (txt[0], [])
        for uid in ids:
            try:
                await context.bot.send_message(int(uid), text=body, reply_markup=InlineKeyboardMarkup(kb))
                ex += 1
            except:
                no += 1
    await update.message.reply_text(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ: {ex}\n‚ùå –ü–æ–º–∏–ª–∫–∏: {no}")


async def ClikButton(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    parts = q.data.split("|")
    cmd, arg = parts[0], parts[-1]

    if cmd == "faq":
        qs = [item["question"] for item in DATA["FAQs"][arg]]
        kb = [[InlineKeyboardButton(q, callback_data=f"showfaq|{arg}|{i}")] for i, q in enumerate(qs)]
        kb.append([InlineKeyboardButton("‚Üê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="menu_main")])
        await q.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(kb))

    elif cmd == "course":
        course = next((c for c in DATA["ActiveCourse"]["Course"] if c["title"] == arg), None)
        if course:
            txt = course["description"]
            kb = [
                [InlineKeyboardButton("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", callback_data=f"registration|{arg}")],
                [InlineKeyboardButton("‚Üê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="menu_main")]
            ]
            await q.edit_message_text(txt, reply_markup=InlineKeyboardMarkup(kb))
        else:
            await q.edit_message_text("–ö—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòï", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Üê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="menu_main")]
            ]))
    
    elif cmd == "registration":
        course = next((c for c in DATA["ActiveCourse"]["Course"] if c["title"] == arg), None)
        if course:
            if course["state"] != "on":
                await q.edit_message_text("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–∫—Ä–∏—Ç–æ", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="menu_main")]]))
                return
            data = json.loads((Path(__file__).parent / 'id_users.json').read_text(encoding='utf-8'))
            id = str(update.effective_chat.id)
            if id not in data["User_data"]:
                await q.edit_message_text("–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Å–≤–æ—ó –¥–∞–Ω–Ω—ñ", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="menu_main")]]))
                return
            msg = f"    –ó–∞—è–≤–∞ –ø—Ä–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –Ω–∞ –∫—É—Ä—Å:\n{arg}\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {data["User_data"][id]["User_name"]}\n–Ü–º'—è: {data["User_data"][id]["Name"]}\n–í—ñ–∫: {data["User_data"][id]["Age"]}\nE-mail: {data["User_data"][id]["E-mail"]}"
            await context.bot.send_message(ADMIN_ID, msg, message_thread_id=1125)
            kb = [[InlineKeyboardButton("‚Üê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="menu_main")]]
            await q.edit_message_text("–ó–∞—è–≤–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞", reply_markup=InlineKeyboardMarkup(kb))
        else:
            await q.edit_message_text("–ö—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòï", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Üê –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="menu_main")]
            ]))

    elif cmd == "showfaq":
        grp, idx = parts[1], int(parts[2])
        qa = DATA["FAQs"][grp][idx]
        key = qa["question"]
        ans = qa["answer"]
        txt = f"‚ùì {key}\n\nüí¨ {ans}"
        kb = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data=f"faq|{grp}")]]
        await q.edit_message_text(txt, reply_markup=InlineKeyboardMarkup(kb))

    elif cmd == "myQ":
        await q.message.reply_text("–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è.")
        return STATE_ASK
    
    elif cmd == "helpadmin":

        ADMIN_PAGES = [
                f"""
            <b>–ö–æ–º–∞–Ω–¥–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å)</b>

            ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            <b>1. –ó–º—ñ–Ω–∞ —Å–∏–º–≤–æ–ª—É —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á–∞</b>
            <b>–ö–æ–º–∞–Ω–¥–∞:</b>
            /sb <i>—Å–∏–º–≤–æ–ª</i>
            <b>–ü–∞—Ä–∞–º–µ—Ç—Ä–∏:</b>
            —Å–∏–º–≤–æ–ª ‚Äì –±—É–¥—å-—è–∫–∏–π 1 —Å–∏–º–≤–æ–ª
            <b>–ü—Ä–∏–∫–ª–∞–¥:</b>
            /sb |

            ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            <b>2. –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É</b>
            <b>–§–æ—Ä–º–∞—Ç–∏:</b>
            1) <code>ID{SYMBOL}–í—ñ–¥–ø–æ–≤—ñ–¥—å</code>
            ‚Äì –æ—Å–æ–±–∏—Å—Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            2) <code>ID{SYMBOL}ThreadID{SYMBOL}–í—ñ–¥–ø–æ–≤—ñ–¥—å</code>
            ‚Äì –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤ —Ç–µ–º—É –≥—Ä—É–ø–∏
            <b>–ü–æ—è—Å–Ω–µ–Ω–Ω—è:</b>
            ID ‚Äì Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ —á–∞—Ç—É
            ThreadID ‚Äì ID —Ç–µ–º–∏
            –í—ñ–¥–ø–æ–≤—ñ–¥—å ‚Äì —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            <b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>
            <code>123456789{SYMBOL}–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è!</code>
            <code>-1002222333444{SYMBOL}1106{SYMBOL}–í—ñ–¥–ø–æ–≤—ñ–¥—å —É —Ç–µ–º—É</code>
            """,

                f"""
            <b>3. –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è (FAQ)</b>
            <b>–ö–æ–º–∞–Ω–¥–∞:</b>
            /add child|adult{SYMBOL}–ø–∏—Ç–∞–Ω–Ω—è{SYMBOL}–≤—ñ–¥–ø–æ–≤—ñ–¥—å
            <b>–ü—Ä–∏–∫–ª–∞–¥:</b>
            /add child{SYMBOL}–©–æ —Ç–∞–∫–µ SFL?{SYMBOL}–¶–µ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π –ø—Ä–æ—î–∫—Ç...

            ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            <b>4. –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è</b>
            <b>–ö–æ–º–∞–Ω–¥–∞:</b>
            /delete child|adult{SYMBOL}–Ω–æ–º–µ—Ä —Ä–∞—Ö—É—é—á–∏ –∑–≤–µ—Ä—Ö—É –¥–æ –Ω–∏–∑—É –∑ 1
            <b>–ü—Ä–∏–∫–ª–∞–¥:</b>
            /delete adult{SYMBOL}2
            """,

                f"""
            <b>5. –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫—É—Ä—Å—É</b>
            <b>–ö–æ–º–∞–Ω–¥–∞:</b>
            /addcourse –Ω–∞–∑–≤–∞{SYMBOL}–æ–ø–∏—Å{SYMBOL}on|off
            <b>–ü—Ä–∏–∫–ª–∞–¥:</b>
            /addcourse Python Basic{SYMBOL}–ö—É—Ä—Å –¥–ª—è –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—ñ–≤...{SYMBOL}on

            ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            <b>6. –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫—É—Ä—Å—É</b>
            <b>–ö–æ–º–∞–Ω–¥–∞:</b>
            /deletecourse –Ω–æ–º–µ—Ä —Ä–∞—Ö—É—é—á–∏ –∑–≤–µ—Ä—Ö—É –¥–æ –Ω–∏–∑—É –∑ 1
            <b>–ü—Ä–∏–∫–ª–∞–¥:</b>
            /deletecourse 1
            """,

                f"""
            <b>7. –ó–º—ñ–Ω–∞ —Å—Ç–∞–Ω—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫—É—Ä—Å—É</b>
            <b>–ö–æ–º–∞–Ω–¥–∞:</b>
            /state –Ω–æ–º–µ—Ä{SYMBOL}on|off (–Ω–æ–º–µ—Ä —Ä–∞—Ö—É—é—á–∏ –∑–≤–µ—Ä—Ö—É –¥–æ –Ω–∏–∑—É –∑ 1)
            <b>–ü—Ä–∏–∫–ª–∞–¥:</b>
            /state 1{SYMBOL}off

            ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            <b>8. –†–æ–∑—Å–∏–ª–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º</b>
            –§–æ—Ä–º–∞—Ç–∏:
            1) /ad —Ç–µ–∫—Å—Ç
            2) /ad —Ç–µ–∫—Å—Ç{SYMBOL}–ø–æ—Å–∏–ª–∞–Ω–Ω—è
            3) –§–æ—Ç–æ + –ø—ñ–¥–ø–∏—Å:
            /ad —Ç–µ–∫—Å—Ç{SYMBOL}–ø–æ—Å–∏–ª–∞–Ω–Ω—è
            <b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>
            /ad –ü—Ä–∏–≤—ñ—Ç, –¥—Ä—É–∑—ñ!
            /ad –ù–æ–≤–∏–π –∫—É—Ä—Å!{SYMBOL}https://example.com
            """,

                f"""
            <b>9. –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</b>
            <b>–ö–æ–º–∞–Ω–¥–∏:</b>
            /ban ID ‚Äì –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            /deleteban ID ‚Äì —Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏
            /alldeleteban ‚Äì –∑–Ω—è—Ç–∏ –≤—Å—ñ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
            <b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>
            /ban 123456789
            /deleteban 123456789
            /alldeleteban
            """
        ]

        page = int(arg)
        text = ADMIN_PAGES[page]
        kb = []
        if page > 0:
            kb.append(InlineKeyboardButton("‚¨Ö", callback_data=f"helpadmin|{page-1}"))
        if page < len(ADMIN_PAGES)-1:
            kb.append(InlineKeyboardButton("‚û°", callback_data=f"helpadmin|{page+1}"))
        await q.edit_message_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup([kb]))


async def admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_ID:
        return
    if update.message.message_thread_id != 1143:
        return
    if  1 >= len(parts) >=4:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: ID$–í—ñ–¥–ø–æ–≤—ñ–¥—å –∞–±–æ ID$ThreadID$–í—ñ–¥–ø–æ–≤—ñ–¥—å")
        return
    try:
        parts = update.message.text.split(SYMBOL)
        if len(parts) == 2:
            uid = int(parts[0].strip())
            await context.bot.send_message(uid, f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{parts[1]}")
            await update.message.reply_text(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")
            return
        if len(parts) == 3:
            chat_id = int(parts[0].strip())
            thread_id = int(parts[1].strip())
            answer = parts[2]
            params = {
                "chat_id": chat_id,
                "text": f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{answer}"
            }
            if thread_id:
                params["message_thread_id"] = thread_id
            await context.bot.send_message(**params)
            await update.message.reply_text(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")
    except Exception as e:
        await update.message.reply_text(f"‚ö† –ü–æ–º–∏–ª–∫–∞: {e}")


async def add_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_ID:
        return
    if not context.args:
        return
    try:
        msg = " ".join(context.args)
        parts = msg.split(SYMBOL)
        if len(parts) != 3:
            await update.message.reply_text("‚ùó –§–æ—Ä–º–∞—Ç: /add child$–ø–∏—Ç–∞–Ω–Ω—è$–≤—ñ–¥–ø–æ–≤—ñ–¥—å")
            return
        grp, qt, ans = parts[0].strip(), parts[1].strip(), parts[2].strip()
        if grp not in ["child", "adult"]:
            await update.message.reply_text("‚ùó –í–∫–∞–∂—ñ—Ç—å 'child' –∞–±–æ 'adult' —è–∫ –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä.")
            return
        data = json.loads((Path(__file__).parent / 'question.json').read_text(encoding='utf-8'))
        data["FAQs"][grp].append({
            "question": qt,
            "answer": ans
        })
        with open(Path(__file__).parent / 'question.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        up_date()
        await update.message.reply_text(f"‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ '{grp}'.")
    except Exception as e:
        await update.message.reply_text(f"‚ö† –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ: {e}")


async def delete_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_ID:
        return
    try:
        args = (update.message.text or "").replace("/delete", "").strip().split(SYMBOL)
        section, question = args
        question = question.strip()
        index = int(question) - 1
        section = section.strip()
        data = json.loads((Path(__file__).parent / "question.json").read_text(encoding="utf-8"))
        if section not in data["FAQs"]:
            await update.message.reply_text(f"‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ä–æ–∑–¥—ñ–ª. –í–∫–∞–∂—ñ—Ç—å: child –∞–±–æ adult.{section}")
            return
        if 0 > index or index > len(data["FAQs"][section]):
            return
        data["FAQs"][section].pop(index)
        with open(Path(__file__).parent / 'question.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        await update.message.reply_text(f"‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —Ä–æ–∑–¥—ñ–ª—É '{section}'.")
    except Exception as e:
        await update.message.reply_text(f"‚ö† –ü–æ–º–∏–ª–∫–∞: {e}")
    up_date()


async def add_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_ID:
        return
    try:
        msg = (update.message.text or "").replace("/addcourse", "").strip()
        parts = msg.split(SYMBOL)
        if len(parts) != 3:
            await update.message.reply_text(f"‚ùó –§–æ—Ä–º–∞—Ç: /addcourse –ù–∞–∑–≤–∞{SYMBOL}–û–ø–∏—Å{SYMBOL}–°—Ç–∞—Ç—É—Å on/off")
            return
        title, description, state = [p.strip() for p in parts]
        data = json.loads((Path(__file__).parent / 'question.json').read_text(encoding='utf-8'))
        new_course = {
            "title": title,
            "description": description,
            "state": state
        }
        data["ActiveCourse"]["Course"].append(new_course)
        with open(Path(__file__).parent / 'question.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        up_date()
        await update.message.reply_text(f"‚úÖ –ö—É—Ä—Å '{title}' –¥–æ–¥–∞–Ω–æ.")
    except Exception as e:
        await update.message.reply_text(f"‚ö† –ü–æ–º–∏–ª–∫–∞: {e}")


async def delete_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_ID:
        return
    try:
        msg = (update.message.text or "").replace("/deletecourse", "").strip()
        if not msg.isdigit():
            await update.message.reply_text("‚ùó –í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –∫—É—Ä—Å—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n`/deletecourse 2`", parse_mode='Markdown')
            return

        index = int(msg) - 1
        data = json.loads((Path(__file__).parent / 'question.json').read_text(encoding='utf-8'))
        courses = data["ActiveCourse"]["Course"]
        if 0 <= index < len(courses):
            removed_course = courses.pop(index)
            with open(Path(__file__).parent / 'question.json', 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=4)
            up_date()
            await update.message.reply_text(f"‚úÖ –ö—É—Ä—Å '{removed_course['title']}' –≤–∏–¥–∞–ª–µ–Ω–æ.")
        else:
            await update.message.reply_text("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –∫—É—Ä—Å—É.")
    except Exception as e:
        await update.message.reply_text(f"‚ö† –ü–æ–º–∏–ª–∫–∞: {e}")


async def Ban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_ID:
        return
    msg = (update.message.text or "").replace("/ban", "").strip()
    try:
        if not msg.isdigit():
                await update.message.reply_text("‚ùó –Ω–µ–≤—ñ—Ä–Ω–∏–π id", parse_mode='Markdown')
                return
        data = json.loads((Path(__file__).parent / 'id_users.json').read_text(encoding='utf-8'))
        if msg not in data["Id_ban"]:
            data["Id_ban"].append(msg)
        with open(Path(__file__).parent / 'id_users.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        await update.message.reply_text(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {msg} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
    except Exception as e:
        await update.message.reply_text(f"‚ö† –ü–æ–º–∏–ª–∫–∞: {e}")


async def delete_Ban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_ID:
        return
    msg = (update.message.text or "").replace("/deleteban", "").strip()
    try:
        if not msg.isdigit():
                await update.message.reply_text("‚ùó –Ω–µ–≤—ñ—Ä–Ω–∏–π id", parse_mode='Markdown')
                return
        data = json.loads((Path(__file__).parent / 'id_users.json').read_text(encoding='utf-8'))
        if msg in data["Id_ban"]:
            data["Id_ban"].remove(msg)
        with open(Path(__file__).parent / 'id_users.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        await update.message.reply_text(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {msg} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
    except Exception as e:
        await update.message.reply_text(f"‚ö† –ü–æ–º–∏–ª–∫–∞: {e}")


async def all_delete_Ban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_ID:
        return
    data = json.loads((Path(__file__).parent / 'id_users.json').read_text(encoding='utf-8'))
    data["Id_ban"] = ["0000000000"]
    with open(Path(__file__).parent / 'id_users.json', 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)
    await update.message.reply_text("‚úÖ –ë–∞–Ω–∏ –∑–Ω—è—Ç–æ")


async def state(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_ID:
        return
    try:
        msg = (update.message.text or "").replace("/state", "").strip()
        parts = msg.split(SYMBOL)

        if len(parts) != 2:
            await update.message.reply_text("–ù–µ –≤–∫–∞–∑–∞–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏")
            return
        if parts[1].strip() not in ["on", "off"]:
            await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å on –∞–±–æ off")
            return
        if not parts[0].strip().isdigit():
            await update.message.reply_text("–ù–µ –≤–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –∫—É—Ä—Å—É")
            return
        
        data = json.loads((Path(__file__).parent / 'question.json').read_text(encoding='utf-8'))
        index = int(parts[0].strip()) - 1
        if not (0 <= index < len(data["ActiveCourse"]["Course"])):
            await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –∫—É—Ä—Å—É")
            return
        
        data["ActiveCourse"]["Course"][index]["state"] = parts[1].strip()
        with open(Path(__file__).parent / 'question.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        up_date()
        await update.message.reply_text("‚úÖ –°—Ç–∞—Ç—É—Å –∫—É—Ä—Å—É –∑–º—ñ–Ω–µ–Ω–æ")
    except Exception as e:
        await update.message.reply_text(f"‚ö† –ü–æ–º–∏–ª–∫–∞: {e}")


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TOKEN).build()

    conv_ask = ConversationHandler(
        entry_points=[CallbackQueryHandler(on_main_menu_pressed, pattern="^menu_ask$")],
        states={STATE_ASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_question)]},
        fallbacks=[]
    )
    conv_fb = ConversationHandler(
        entry_points=[CallbackQueryHandler(on_main_menu_pressed, pattern="^menu_feedback$")],
        states={STATE_FB: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_feedback)]},
        fallbacks=[]
    )
    conv_rev = ConversationHandler(
        entry_points=[CallbackQueryHandler(on_main_menu_pressed, pattern="^menu_reviews$")],
        states={STATE_REV: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_review)]},
        fallbacks=[]
    )

    conv_userdata = ConversationHandler(
        entry_points=[CallbackQueryHandler(on_main_menu_pressed, pattern="^menu_userdata$")],
        states={
            STATE_DATA_1: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_data_1)],
            STATE_DATA_2: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_data_2)],
            STATE_DATA_3: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_data_3)],
        },
        fallbacks=[],
    )

    app.add_handler(conv_ask)
    app.add_handler(conv_fb)
    app.add_handler(conv_rev)
    app.add_handler(conv_userdata)
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("state", state))
    app.add_handler(CommandHandler("ban", Ban))
    app.add_handler(CommandHandler("deleteban", delete_Ban))
    app.add_handler(CommandHandler("alldeleteban", all_delete_Ban))
    app.add_handler(CommandHandler("help", HelpAdmin))
    app.add_handler(CommandHandler("sb", set_symbol))
    app.add_handler(CommandHandler("add", add_question))
    app.add_handler(CommandHandler("delete", delete_question))
    app.add_handler(CommandHandler("addcourse", add_course))
    app.add_handler(CommandHandler("deletecourse", delete_course))
    app.add_handler(MessageHandler((filters.Regex(r"^/ad") | filters.CaptionRegex(r"^/ad")) & filters.Chat(ADMIN_ID), ad))
    app.add_handler(CallbackQueryHandler(on_main_menu_pressed, pattern="^menu_"))
    app.add_handler(CallbackQueryHandler(ClikButton, pattern="^(faq|course|showfaq|myQ|registration|helpadmin)\|"))
    app.add_handler(MessageHandler(filters.Chat(ADMIN_ID) & filters.TEXT, admin_reply))

    app.run_polling(drop_pending_updates=True)

#YaroBot
#IlyaBot